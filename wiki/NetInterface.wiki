#summary One-sentence summary of this page.

= Introduction =

服务器框架的接口, 继承ConnectAccepter和EventHandler类


= 成员函数 =
 *　*实现积累ConnectAccepter和EventHandler的方法*
{{{
//实现ConnectAccepter:接收一个新的连接请求
virtual bool accept(SocketHandle trans_fd);

//重写EventHandler:实现trans socket的读写
virtual HANDLE_RESULT on_readable(int fd);
virtual HANDLE_RESULT on_writeabble(int fd);
virtual HANDLE_RESULT on_timeout(int fd);  //to do deal with timeout
virtual HANDLE_RESULT on_error(int fd); //to do deal with error
}}}

 * *构造函数*
{{{
//需要聚合一个io_demuxer,protocol_family协议族,socket_manager管理器
NetInterface(IODemuxer *io_demuxer, ProtocolFamily *protocol_family, SocketManager *socket_manager);
}}}

 * *应用程序需要实现的接口*
{{{
//////////////////由应用层重写 接收协议函数//////////////////
virtual int on_recv_protocol(SocketHandle socket_handle, Protocol *protocol)=0;
//////////////////由应用层重写 协议发送错误处理函数//////////
virtual int on_protocol_send_error(SocketHandle socket_handle, Protocol *protocol)=0;
//////////////////由应用层重写 协议发送成功处理函数//////////
virtual int on_protocol_send_succ(SocketHandle socket_handle, Protocol *protocol)=0;
//////////////////由应用层重写 连接错误处理函数//////////////
virtual int on_socket_handle_error(SocketHandle socket_handle)=0;
//////////////////由应用层重写 连接超时处理函数//////////////
virtual int on_socket_handle_timeout(SocketHandle socket_handle)=0;
//////////////////由应用层重写 收到一个新的连接请求////////
virtual int on_socket_handler_accpet(SocketHandle socket_handle){return 0;}
}}}

 * *其他成员函数*
{{{
//获取主动链接
virtual SocketHandle get_active_trans_socket(const char *ip, int port);
//添加协议到发送队列.成功返回0.失败返回-1,需要自行处理protocol.
virtual int send_protocol(SocketHandle socket_handle, Protocol *protocol, bool has_resp=false);
//获取等待队列中待发送的协议
virtual Protocol* get_wait_to_send_protocol(SocketHandle socket_handle);
//获取等待队列中待发送的协议个数
virtual int get_wait_to_send_protocol_number(SocketHandle socket_handle);
//取消所有待发送协议,同时调用on_protocol_send_error通知应用层
virtual int cancal_wait_to_send_protocol(SocketHandle socket_handle);
}}}