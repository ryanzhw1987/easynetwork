#summary One-sentence summary of this page.

= Introduction =

本节介绍一个使用EasyNetwork框架搭建到下载服务器.该服务器支持多任务/多线程/下载,支持断点续传.

该Donwload server/client比较简单,没有过多的优化工作,以及保证服务的稳定性以及.因为我们的focus是“怎么使用框架搭建Download server",而不是“Download server". 当然,现在我们的精力是在应用层,而不是框架.呵呵...好吧,进入主题,下面内容主要有:
 [Download#1_Download_Protocol]
 [#2_Download_Server]

= 1_Download Protocol =
下载协议,是最基本到要求了,我就不说啥了. 我们利用框架的DefaultProtocol来定义我们下载的4个协议:RequestSize, RespondSize, RequestData, RespondData.

 * *RequestSize 请求文件大小*
{{{
class RequestSize: public DefaultProtocol
{
public://实现protocol的接口
	//编码协议体数据到io_buffer.成功返回编码后协议体长度(大于0),失败返回-1;
	int encode_body(IOBuffer *io_buffer);
	//解码包体.成功返回0,否则返回-1;
	int decode_body(const char* buf, int buf_size);
public:
	RequestSize():DefaultProtocol(PROTOCOL_REQUEST_SIZE){}
	RequestSize(string &filename):DefaultProtocol(PROTOCOL_REQUEST_SIZE)
	{
		m_file_name = filename;
	}
	void assign(const string &file_name){m_file_name = file_name;}
	const string& get_file_name(){return m_file_name;}
private:
	string m_file_name;
};
}}}

 * *RespondSize 回复文件大小*
{{{
class RespondSize: public DefaultProtocol
{
public://实现protocol的接口
	//编码协议体数据到io_buffer.成功返回编码后协议体长度(大于0),失败返回-1;
	int encode_body(IOBuffer *io_buffer);
	//解码包体.成功返回0,否则返回-1;
	int decode_body(const char* buf, int buf_size);
public:
	RespondSize():DefaultProtocol(PROTOCOL_RESPOND_SIZE), m_file_size(0){}
	RespondSize(string &filename, unsigned long long file_size):DefaultProtocol(PROTOCOL_RESPOND_SIZE)
	{
		m_file_size = file_size;
		m_file_name = filename;
	}

	void assign(const string &file_name, unsigned long long file_size)
	{
		m_file_name = file_name;
		m_file_size = file_size;
	}

	const string& get_file_name(){return m_file_name;}
	unsigned long long get_file_size(){return m_file_size;}
private:
	unsigned long long m_file_size;
	string m_file_name;
};
}}}

 * *RequestData 请求文件数据*
{{{
public://实现protocol的接口
	//编码协议体数据到io_buffer.成功返回编码后协议体长度(大于0),失败返回-1;
	int encode_body(IOBuffer *io_buffer);
	//解码包体.成功返回0,否则返回-1;
	int decode_body(const char* buf, int buf_size);
public:
	RequestData():DefaultProtocol(PROTOCOL_REQUEST_DATA), m_start_pos(0), m_size(0){}
	RequestData(string &filename, unsigned long long start_pos, unsigned int size):DefaultProtocol(PROTOCOL_REQUEST_DATA)
	{
		m_start_pos = start_pos;
		m_size = size;
		m_file_name = filename;
	}

	void assign(const string &file_name, unsigned long long start_pos, unsigned int size)
	{
		m_file_name = file_name;
		m_start_pos = start_pos;
		m_size = size;
	}

	unsigned long long get_start_pos(){return m_start_pos;}
	unsigned int get_size(){return m_size;}
	const string& get_file_name(){return m_file_name;}
private:
	unsigned long long m_start_pos;
	unsigned int m_size;
	string m_file_name;
};
}}}

 * *RespondData 回复文件数据*
{{{
class RespondData: public DefaultProtocol
{
public://实现protocol的接口
	//编码协议体数据到io_buffer.成功返回编码后协议体长度(大于0),失败返回-1;
	int encode_body(IOBuffer *io_buffer);
	//解码包体.成功返回0,否则返回-1;
	int decode_body(const char* buf, int buf_size);
public:
	RespondData():DefaultProtocol(PROTOCOL_RESPOND_DATA), m_start_pos(0), m_size(0){}
	RespondData(string &filename, unsigned long long start_pos, unsigned int size, string &data):DefaultProtocol(PROTOCOL_RESPOND_DATA)
	{
		m_start_pos = start_pos;
		m_size = size;
		m_file_name = filename;
		m_data = data;
	}

	void assign(const string &file_name, unsigned long long start_pos, unsigned int size)
	{
		m_file_name = file_name;
		m_start_pos = start_pos;
		m_size = size;
	}

	void assign(string &data)
	{
		m_data = data;
	}

	const string& get_file_name(){return m_file_name;}
	const string& get_data(){return m_data;}
	unsigned long long get_start_pos(){return m_start_pos;}
	unsigned int get_size(){return m_size;}

private:
	string m_file_name;
	string m_data;
	unsigned long long m_start_pos;
	unsigned int m_size;
};
}}}


 * *DownloadProtocolFamily协议族*
最后需要定义一个协议族来生成上面四个协议
{{{
class DownloadProtocolFamily:public DefaultProtocolFamily
{
public:
	Protocol* create_protocol(ProtocolType protocol_type, bool new_header=true);
	int destroy_protocol(Protocol* protocol);
private:
	//memory cache: StringProtocol
	MemCache<RequestSize> m_request_size_memcache;
	MemCache<RespondSize> m_respond_size_memcache;
	MemCache<RequestData> m_request_data_memcache;
	MemCache<RespondData> m_respond_data_memcache;
};
}}}


= 2 Download Serer =
 

= 3 Download Client =